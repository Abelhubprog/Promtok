services:
  # PostgreSQL database for document management
  postgres:
    image: pgvector/pgvector:pg15
    container_name: promtok-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-promtok_db}
      POSTGRES_USER: ${POSTGRES_USER:-promtok_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-promtok_password}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - promtok-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-promtok_user} -d ${POSTGRES_DB:-promtok_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx reverse proxy - single entry point for the application
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    image: promtok-nginx
    container_name: promtok-nginx
    ports:
      - "${PROMTOK_PORT:-80}:80"
    depends_on:
      - backend
      - frontend
    networks:
      - promtok-network
    restart: unless-stopped

  backend:
    build:
      context: ./promtok_backend
      dockerfile: Dockerfile.railway
    image: promtok-backend
    container_name: promtok-backend
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - promtok-data:/app/ai_researcher/data
      - ${MODEL_CACHE_DIR:-./promtok_model_cache}:/root/.cache/huggingface
      - ${DATA_CACHE_DIR:-./promtok_datalab_cache}:/root/.cache/datalab
      - ./reports:/app/reports
      - ./promtok_backend/data:/app/data
    # Backend is now only accessible through nginx, not directly exposed
    # ports:
    #   - "${BACKEND_HOST}:${BACKEND_PORT}:${BACKEND_INTERNAL_PORT}"
    working_dir: /app
    environment:
      - MAX_WORKER_THREADS=${MAX_WORKER_THREADS:-10}
      - TZ=${TZ:-UTC}
      - LOG_LEVEL=${LOG_LEVEL:-ERROR}
      # Force CPU mode explicitly
      - FORCE_CPU_MODE=${FORCE_CPU_MODE:-true}
      - PREFERRED_DEVICE_TYPE=${PREFERRED_DEVICE_TYPE:-cpu}
      # CORS configuration for reverse proxy support
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-*}
      # Allow all origins in development mode when using nginx proxy
      - ALLOW_CORS_WILDCARD=${ALLOW_CORS_WILDCARD:-true}
      # PostgreSQL connection - uses environment variables
      - DATABASE_URL=postgresql://${POSTGRES_USER:-promtok_user}:${POSTGRES_PASSWORD:-promtok_password}@${POSTGRES_HOST:-postgres}:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-promtok_db}
      # Admin credentials for initial setup
      - ADMIN_USERNAME=${ADMIN_USERNAME:-admin}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin123}
      # JWT Secret for authentication
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-secret-key-change-this}
    networks:
      - promtok-network
    # CPU-only: no GPU reservations

  frontend:
    build:
      context: ./promtok_frontend
      dockerfile: Dockerfile
      # No build args needed - using relative URLs through nginx proxy
    image: promtok-frontend
    container_name: promtok-frontend
    # Frontend is now only accessible through nginx, not directly exposed
    # ports:
    #   - "${FRONTEND_HOST}:${FRONTEND_PORT}:${FRONTEND_INTERNAL_PORT}"
    depends_on:
      - backend
    networks:
      - promtok-network
    environment:
      # API URLs (optional - using relative URLs through nginx proxy by default)
      - VITE_SERVER_TIMEZONE=${VITE_SERVER_TIMEZONE:-UTC}
      - TZ=${TZ:-UTC}
      - LOG_LEVEL=${LOG_LEVEL:-ERROR}

  doc-processor:
    build:
      context: ./promtok_backend
      dockerfile: Dockerfile.railway
    image: promtok-doc-processor  # Unique image name
    container_name: promtok-doc-processor
    command: ["python", "-u", "services/background_document_processor.py"]
    working_dir: /app
    volumes:
      - promtok-data:/app/ai_researcher/data
      - ${MODEL_CACHE_DIR:-./promtok_model_cache}:/root/.cache/huggingface
      - ${DATA_CACHE_DIR:-./promtok_datalab_cache}:/root/.cache/datalab
      - ./reports:/app/reports
      - ./promtok_backend/data:/app/data
    depends_on:
      - backend
    networks:
      - promtok-network
    environment:
      - TZ=${TZ:-UTC}
      - LOG_LEVEL=${LOG_LEVEL:-ERROR}
      # PostgreSQL connection - same as backend
      - DATABASE_URL=postgresql://${POSTGRES_USER:-promtok_user}:${POSTGRES_PASSWORD:-promtok_password}@${POSTGRES_HOST:-postgres}:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-promtok_db}
      # Force CPU mode explicitly
      - FORCE_CPU_MODE=${FORCE_CPU_MODE:-true}
      - PREFERRED_DEVICE_TYPE=${PREFERRED_DEVICE_TYPE:-cpu}
    # CPU-only: no GPU reservations

  # CLI service for document ingestion and management
  cli:
    build:
      context: ./promtok_backend
      dockerfile: Dockerfile.railway
    image: promtok-cli  # Unique image name
    container_name: promtok-cli
    working_dir: /app
    volumes:
      - promtok-data:/app/ai_researcher/data
      - ${MODEL_CACHE_DIR:-./promtok_model_cache}:/root/.cache/huggingface
      - ${DATA_CACHE_DIR:-./promtok_datalab_cache}:/root/.cache/datalab
      - ./reports:/app/reports
      - ./promtok_backend/data:/app/data
      # Mount a directory for bulk PDF ingestion
      - ./pdfs:/app/pdfs  # Read-write mount for PDF files (allows deletion after processing)
    depends_on:
      - backend
    networks:
      - promtok-network
    environment:
      - TZ=${TZ:-UTC}
      - LOG_LEVEL=${LOG_LEVEL:-ERROR}
      # PostgreSQL connection - same as backend
      - DATABASE_URL=postgresql://${POSTGRES_USER:-promtok_user}:${POSTGRES_PASSWORD:-promtok_password}@${POSTGRES_HOST:-postgres}:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-promtok_db}
      # Performance settings from .env (optional, with defaults)
      - TRANSFORMERS_VERBOSITY=${TRANSFORMERS_VERBOSITY:-error}
      - TOKENIZERS_PARALLELISM=${TOKENIZERS_PARALLELISM:-false}
      - TF_CPP_MIN_LOG_LEVEL=${TF_CPP_MIN_LOG_LEVEL:-3}
      - PYTHONWARNINGS=${PYTHONWARNINGS:-ignore}
      # Force CPU mode explicitly
      - FORCE_CPU_MODE=${FORCE_CPU_MODE:-true}
      - PREFERRED_DEVICE_TYPE=${PREFERRED_DEVICE_TYPE:-cpu}
    profiles:
      - cli  # This service only runs when explicitly requested
    # CPU-only: no GPU reservations

  # Optional: Add a service for local LLM if needed
  # local-llm:
  #   image: ghcr.io/ollama/ollama:latest
  #   container_name: local-llm
  #   volumes:
  #     - ollama-data:/root/.ollama
  #   ports:
  #     - "${LOCAL_LLM_HOST}:${LOCAL_LLM_PORT}:${LOCAL_LLM_INTERNAL_PORT}"
  #   restart: unless-stopped
  #   # GPU support for local LLM - uncomment if needed
  #   # deploy:
  #   #   resources:
  #   #     reservations:
  #   #       devices:
  #   #         - driver: nvidia
  #   #           count: 1
  #   #           capabilities: [gpu]

volumes:
  postgres-data:
  promtok-data:
  promtok-models:  # New volume for models
  # ollama-data:

networks:
  promtok-network:
    driver: bridge
