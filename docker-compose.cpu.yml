services:
  # PostgreSQL database
  postgres:
    image: pgvector/pgvector:pg15
    container_name: promtok-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-maestro_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-maestro_password}
      POSTGRES_DB: ${POSTGRES_DB:-maestro_db}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - promtok-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-maestro_user} -d ${POSTGRES_DB:-maestro_db}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Nginx reverse proxy - single entry point for the application
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    image: promtok-nginx
    container_name: promtok-nginx
    ports:
      - "${PROMTOK_PORT:-80}:80"
    depends_on:
      - backend
      - frontend
    networks:
      - promtok-network
    restart: unless-stopped

  backend:
    build:
      context: ./promtok_backend
      dockerfile: Dockerfile
    image: promtok-backend
    container_name: promtok-backend
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - promtok-data:/app/ai_researcher/data
      - ./maestro_model_cache:/root/.cache/huggingface
      - ./maestro_datalab_cache:/root/.cache/datalab
      - ./reports:/app/reports
      - ./promtok_backend/data:/app/data
    working_dir: /app
    environment:
      - MAX_WORKER_THREADS=${MAX_WORKER_THREADS:-10}
      - TZ=${TZ:-UTC}
      - LOG_LEVEL=${LOG_LEVEL:-ERROR}
      # Enable auto-reload for local development
      - UVICORN_RELOAD=${UVICORN_RELOAD:-true}
      # Force CPU mode
      - FORCE_CPU_MODE=true
      - PREFERRED_DEVICE_TYPE=cpu
      # CORS configuration for reverse proxy support
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-*}
      # Allow all origins in development mode when using nginx proxy
      - ALLOW_CORS_WILDCARD=${ALLOW_CORS_WILDCARD:-true}
      # PostgreSQL connection
      - DATABASE_URL=postgresql://${POSTGRES_USER:-promtok_user}:${POSTGRES_PASSWORD:-promtok_password}@${POSTGRES_HOST:-postgres}:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-promtok_db}
      # Admin credentials for initial setup
      - ADMIN_USERNAME=${ADMIN_USERNAME:-admin}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin123}
      # JWT Secret for authentication
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-secret-key-change-this}
    networks:
      - promtok-network
    # No GPU configuration for CPU-only mode

  frontend:
    build:
      context: ./promtok_frontend
      dockerfile: Dockerfile
    image: promtok-frontend
    container_name: promtok-frontend
    depends_on:
      - backend
    networks:
      - promtok-network
    environment:
      # API URLs (optional - using relative URLs through nginx proxy by default)
      - VITE_SERVER_TIMEZONE=${VITE_SERVER_TIMEZONE:-UTC}
      - TZ=${TZ:-UTC}
      - LOG_LEVEL=${LOG_LEVEL:-ERROR}

  doc-processor:
    build:
      context: ./promtok_backend
      dockerfile: Dockerfile
    image: promtok-doc-processor
    container_name: promtok-doc-processor
    command: ["python", "-u", "services/background_document_processor.py"]
    working_dir: /app
    volumes:
      - promtok-data:/app/ai_researcher/data
      - ./maestro_model_cache:/root/.cache/huggingface
      - ./maestro_datalab_cache:/root/.cache/datalab
      - ./reports:/app/reports
      - ./promtok_backend/data:/app/data
    depends_on:
      - backend
    networks:
      - promtok-network
    environment:
      - TZ=${TZ:-UTC}
      - LOG_LEVEL=${LOG_LEVEL:-ERROR}
      # PostgreSQL connection - same as backend
      - DATABASE_URL=postgresql://${POSTGRES_USER:-promtok_user}:${POSTGRES_PASSWORD:-promtok_password}@${POSTGRES_HOST:-postgres}:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-promtok_db}
      # Force CPU mode
      - FORCE_CPU_MODE=true
      - PREFERRED_DEVICE_TYPE=cpu
    # No GPU configuration for CPU-only mode

  cli:
    build:
      context: ./promtok_backend
      dockerfile: Dockerfile
    image: promtok-cli
    container_name: promtok-cli
    command: ["bash"]
    stdin_open: true
    tty: true
    working_dir: /app
    volumes:
      - promtok-data:/app/ai_researcher/data
      - ./maestro_model_cache:/root/.cache/huggingface
      - ./maestro_datalab_cache:/root/.cache/datalab
      - ./reports:/app/reports
      - ./promtok_backend/data:/app/data
    depends_on:
      - backend
    networks:
      - promtok-network
    environment:
      - TZ=${TZ:-UTC}
      - LOG_LEVEL=${LOG_LEVEL:-ERROR}
      # Force CPU mode
      - FORCE_CPU_MODE=true
      - PREFERRED_DEVICE_TYPE=cpu
    # No GPU configuration for CPU-only mode

  # Optional local LLM service (uncomment if using)
  # ollama:
  #   image: ollama/ollama:latest
  #   container_name: promtok-ollama
  #   ports:
  #     - "${LOCAL_LLM_HOST:-127.0.0.1}:${LOCAL_LLM_PORT:-5000}:${LOCAL_LLM_INTERNAL_PORT:-11434}"
  #   volumes:
  #     - ollama-data:/root/.ollama
  #   networks:
  #     - maestro-network
  #   restart: unless-stopped

volumes:
  postgres-data:
    driver: local
  promtok-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./maestro_data
  # Uncomment if using local LLM
  # ollama-data:
  #   driver: local

networks:
  promtok-network:
    driver: bridge
